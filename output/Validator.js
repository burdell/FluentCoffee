// Generated by CoffeeScript 1.7.1
var FunctionValidation, ObjectValidation, Validation, Validator,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Validator = (function() {
  var GetValidation, validationErrors;

  function Validator() {}

  validationErrors = [];

  GetValidation = function(itemToValidate) {
    var typeOf;
    typeOf = typeof itemToValidate;
    if (typeOf === "object" && itemToValidate !== null) {
      return new ObjectValidation(itemToValidate, validationErrors, this.For);
    }
    if (typeOf === "function") {
      return new FunctionValidation(itemToValidate, validationErrors, this.For);
    }
    return new Validation(itemToValidate, validationErrors, this.For, true);
  };

  Validator.prototype.For = function(itemToValidate) {
    return new GetValidation(itemToValidate);
  };

  return Validator;

})();

Validation = (function() {
  Validation.itemOption = null;

  Validation.currentValue = null;

  function Validation(itemToValidate, validationErrors, KillFunction, isPrimitiveValue) {
    this.itemToValidate = itemToValidate;
    this.validationErrors = validationErrors;
    this.KillFunction = KillFunction;
    this.isPrimitiveValue = isPrimitiveValue;
    if (this.isPrimitiveValue) {
      this.currentValue = this.itemToValidate;
    }
    if (this.isPrimitiveValue) {
      this.itemOption = "Value";
    }
  }

  Validation.prototype.AddError = function(errorMessage) {
    return this.validationErrors.push({
      field: this.itemOption,
      message: errorMessage
    });
  };

  Validation.prototype.Validate = function(isValid, message) {
    if ((this.currentValue != null) || this.isPrimitiveValue && !isValid()) {
      return this.AddError("" + this.itemOption + " " + message);
    }
  };

  Validation.prototype.For = function(itemToValidate) {
    return this.KillFunction(itemToValidate);
  };

  Validation.prototype.Assert = function() {
    return {
      valid: this.validationErrors.length === 0,
      errors: this.validationErrors
    };
  };

  Validation.prototype.GreaterThan = function(compareValue) {
    this.Validate((function() {
      return this.currentValue > compareValue;
    }), "must be greater than " + compareValue);
    return this;
  };

  Validation.prototype.LessThan = function(compareValue) {
    this.Validate((function() {
      return this.currentValue < compareValue;
    }), "must be less than " + compareValue);
    return this;
  };

  Validation.prototype.Between = function(floor, ceiling) {
    this.Validate((function() {
      return this.currentValue > floor && this.currentValue < ceiling;
    }), "must be between " + floor + " and " + ceiling);
    return this;
  };

  Validation.prototype.EqualTo = function(compareValue) {
    this.Validate((function() {
      return this.currentValue === compareValue;
    }), "must be " + compareValue);
    return this;
  };

  Validation.prototype.Contains = function(substring) {
    var currentValue;
    currentValue = this.currentValue;
    this.Validate((function() {
      return currentValue.indexOf(substring) > -1;
    }), "must contain " + substring);
    return this;
  };

  return Validation;

})();

ObjectValidation = (function(_super) {
  __extends(ObjectValidation, _super);

  function ObjectValidation() {
    return ObjectValidation.__super__.constructor.apply(this, arguments);
  }

  ObjectValidation.prototype.itemOptionExists = function() {
    return this.itemToValidate[this.itemOption] != null;
  };

  ObjectValidation.prototype.SetCurrent = function(fieldName, required) {
    this.itemOption = fieldName;
    this.currentValue = null;
    if (this.itemOptionExists) {
      return this.currentValue = this.itemToValidate[this.itemOption];
    } else if (required) {
      return this.AddError("" + this.itemOption + " is required");
    }
  };

  ObjectValidation.prototype.Require = function(fieldName) {
    this.SetCurrent(fieldName, true);
    return this;
  };

  ObjectValidation.prototype.Optional = function(fieldName) {
    this.SetCurrent(fieldName);
    return this;
  };

  return ObjectValidation;

})(Validation);

FunctionValidation = (function(_super) {
  __extends(FunctionValidation, _super);

  function FunctionValidation() {
    return FunctionValidation.__super__.constructor.apply(this, arguments);
  }

  FunctionValidation.prototype.WithParameters = function() {
    var parameters;
    parameters = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.itemOption = parameters;
  };

  return FunctionValidation;

})(Validation);
