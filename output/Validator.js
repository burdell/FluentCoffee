// Generated by CoffeeScript 1.7.1
var ObjectValidation, Validation, Validator,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Validator = (function() {
  var GetValidation, validationErrors;

  function Validator() {}

  validationErrors = [];

  GetValidation = function(type, itemToValidate) {
    if ("Object") {
      return new ObjectValidation(itemToValidate, validationErrors, this.For);
    }
  };

  Validator.prototype.For = function(type, itemToValidate) {
    var validation;
    return validation = new GetValidation(type, itemToValidate);
  };

  return Validator;

})();

Validation = (function() {
  Validation.currentField = null;

  function Validation(itemToValidate, validationErrors, KillFunction) {
    this.itemToValidate = itemToValidate;
    this.validationErrors = validationErrors;
    this.KillFunction = KillFunction;
  }

  Validation.prototype.AddError = function(errorMessage) {
    return this.validationErrors.push({
      field: this.currentField,
      message: errorMessage
    });
  };

  Validation.prototype.For = function(type, itemToValidate) {
    return this.KillFunction(type, itemToValidate);
  };

  Validation.prototype.GreaterThan = function(compareTo, baseValue) {
    return baseValue > compareTo;
  };

  Validation.prototype.LessThan = function(compareTo, baseValue) {
    return baseValue < compareTo;
  };

  Validation.prototype.Between = function(floor, ceiling, baseValue) {
    return GreaterThan(floor, baseValue) && LessThan(ceiling, baseValue);
  };

  Validation.prototype.EqualTo = function(compareTo, baseValue) {
    return baseValue === valueToCompare;
  };

  return Validation;

})();

ObjectValidation = (function(_super) {
  __extends(ObjectValidation, _super);

  function ObjectValidation() {
    return ObjectValidation.__super__.constructor.apply(this, arguments);
  }

  ObjectValidation.prototype.CurrentFieldExists = function() {
    return this.itemToValidate[this.currentField] != null;
  };

  ObjectValidation.prototype.Require = function(fieldName) {
    this.currentField = fieldName;
    if (!this.CurrentFieldExists()) {
      this.AddError("" + this.currentField + " is required");
    }
    return this;
  };

  ObjectValidation.prototype.Optional = function(fieldName) {
    this.currentField = fieldName;
    return this;
  };

  return ObjectValidation;

})(Validation);
